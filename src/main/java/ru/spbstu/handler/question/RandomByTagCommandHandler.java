package ru.spbstu.handler.question;

import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.polls.SendPoll;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.spbstu.handler.CommandHandler;
import ru.spbstu.model.Question;
import ru.spbstu.model.QuestionOption;
import ru.spbstu.service.QuestionService;
import ru.spbstu.service.ScoreByTagService;
import ru.spbstu.service.UserService;
import ru.spbstu.session.QuizSession;
import ru.spbstu.utils.SessionManager;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class RandomByTagCommandHandler implements CommandHandler {
    private final QuestionService questionService;
    private final SessionManager sessionManager;
    private final ScoreByTagService scoreByTagService;
    private final UserService userService;

    public RandomByTagCommandHandler(QuestionService questionService,
                                     SessionManager sessionManager,
                                     ScoreByTagService scoreByTagService,
                                     UserService userService) {
        this.questionService = questionService;
        this.sessionManager = sessionManager;
        this.scoreByTagService = scoreByTagService;
        this.userService = userService;
    }

    @Override
    public String getCommand() {
        return "/random_by_tag";
    }

    @Override
    public String getDescription() {
        return "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É";
    }

    @Override
    public void handle(Update update, AbsSender sender) {
        var chatId = update.getMessage().getChatId();
        var userId = update.getMessage().getFrom().getId();
        var text = update.getMessage().getText();
        
        if (text.equals("/random_by_tag")) {
            send(sender, chatId, "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /random_by_tag <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–µ–≥–∞>\n\n" +
                    "–ü—Ä–∏–º–µ—Ä: /random_by_tag java");
            return;
        }
        
        if (text.startsWith("/random_by_tag ")) {
            String tagName = text.substring("/random_by_tag ".length()).trim();
            if (tagName.isEmpty()) {
                send(sender, chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞.\n\n" +
                        "–ü—Ä–∏–º–µ—Ä: /random_by_tag java");
                return;
            }
            startNewQuizByTag(userId, chatId, tagName, sender);
            return;
        }

        System.out.println("–ü–µ—Ä–µ–¥ if update.hasPollAnswer()");
        if (update.hasPollAnswer()) {
            System.out.println("–ó–∞—à–ª–∏ –≤ if update.hasPollAnswer()");
            handlePollAnswer(update, sender);
        }
    }
    
    private void startNewQuizByTag(Long userId, Long chatId, String tagName, AbsSender sender) {
        Question randomQuestion = questionService.getRandomQuestionByTag(tagName);

        if (randomQuestion == null) {
            send(sender, chatId, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–≥–æ–º '" + tagName + "'.\n\n" +
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n" +
                    "‚Ä¢ –¢–µ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n" +
                    "‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º\n" +
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list_tags –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤");
            return;
        }
        
        QuizSession session = sessionManager.getOrCreate(userId, QuizSession.class);
        session.setCurrentQuestion(randomQuestion);
        session.setStep(QuizSession.Step.WAITING_FOR_ANSWER);

        System.out.println("Waiting for question\n");
        
        List<QuestionOption> sortedOptions = randomQuestion.getOptions().stream()
                .sorted(Comparator.comparingInt(QuestionOption::getOptionNumber))
                .toList();
        
        List<String> options = sortedOptions.stream()
                .map(QuestionOption::getText)
                .collect(Collectors.toList());
        
        SendPoll poll = new SendPoll();
        poll.setChatId(chatId.toString());
        poll.setQuestion("üè∑Ô∏è [" + tagName + "] " + randomQuestion.getText());
        poll.setOptions(options);
        poll.setCorrectOptionId(randomQuestion.getCorrectOption() - 1); // Telegram –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 0-based –∏–Ω–¥–µ–∫—Å—ã
        poll.setType("quiz");
        poll.setOpenPeriod(30);
        poll.setIsAnonymous(false);
        
        try {
            sender.execute(poll);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handlePollAnswer(Update update, AbsSender sender) {
        var pollAnswer = update.getPollAnswer();
        var userId = pollAnswer.getUser().getId();
        var optionIds = pollAnswer.getOptionIds();
        
        if (optionIds == null || optionIds.isEmpty()) {
            return;
        }
        
        int selectedAnswer = optionIds.get(0) + 1; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ 1-based
        
        QuizSession session = sessionManager.getSession(userId, QuizSession.class);
        if (session == null || session.isAnswered()) {
            return;
        }
        
        session.setAnswered(true);
        
        Question question = session.getCurrentQuestion();
        boolean isCorrect = selectedAnswer == question.getCorrectOption();
        
        if (isCorrect) {
            var user = userService.getUser(userId);
            user.setScore(user.getScore() + 1);
            userService.save(user);
            for (var tag : question.getTags()) {
                scoreByTagService.incrementScore(user, tag);
            }
        }
        System.out.println("–ü–ï–†–ï–î SHOWQUIZ –≤ randomByTag");
        showQuizResult(sender, userId, question, selectedAnswer, isCorrect, userService.getUser(userId).getScore());
    }
    
    private void showQuizResult(AbsSender sender, Long chatId, Question question,
                                int selectedAnswer, boolean isCorrect, int score) {
        StringBuilder message = new StringBuilder();
        
        if (isCorrect) {
            message.append("‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b> +1 –±–∞–ª–ª\n\n");
        } else {
            message.append("‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ!</b>\n\n");
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        QuestionOption correctOption = question.getOptions().stream()
                .filter(option -> option.getOptionNumber() == question.getCorrectOption())
                .findFirst()
                .orElse(null);
        
        if (correctOption != null) {
            message.append("üí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> ").append(question.getCorrectOption())
                   .append(". ").append(correctOption.getText()).append("\n\n");
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (!question.getTags().isEmpty()) {
            String tags = question.getTags().stream()
                    .map(tag -> "#" + tag.getName())
                    .collect(Collectors.joining(" "));
            message.append("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> ").append(tags).append("\n\n");
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç
        message.append("üèÜ <b>–í–∞—à —Å—á–µ—Ç:</b> ").append(score).append(" –±–∞–ª–ª–æ–≤");
        
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(message.toString());
        sendMessage.setParseMode("HTML");
        
        try {
            sender.execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    
    private void showCorrectAnswer(AbsSender sender, Long chatId, Question question) {
        QuestionOption correctOption = question.getOptions().stream()
                .filter(option -> option.getOptionNumber() == question.getCorrectOption())
                .findFirst()
                .orElse(null);
        
        if (correctOption != null) {
            StringBuilder message = new StringBuilder();
            message.append("üí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> ").append(question.getCorrectOption())
                   .append(". ").append(correctOption.getText()).append("\n\n");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (!question.getTags().isEmpty()) {
                String tags = question.getTags().stream()
                        .map(tag -> "#" + tag.getName())
                        .collect(Collectors.joining(" "));
                message.append("üè∑Ô∏è <b>–¢–µ–≥–∏:</b> ").append(tags);
            }
            
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId.toString());
            sendMessage.setText(message.toString());
            sendMessage.setParseMode("HTML");
            
            try {
                sender.execute(sendMessage);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }

    private void send(AbsSender sender, Long chatId, String text) {
        try {
            sender.execute(new SendMessage(chatId.toString(), text));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
