package ru.spbstu.handler;

import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.spbstu.service.QuestionService;
import ru.spbstu.session.QuestionSession;
import ru.spbstu.utils.SessionManager;

import java.util.Arrays;

@Component
public class AddQuestionCommandHandler implements CommandHandler {
    private final SessionManager sessionManager;
    private final QuestionService questionService;

    public AddQuestionCommandHandler(SessionManager sessionManager, QuestionService questionService) {
        this.sessionManager = sessionManager;
        this.questionService = questionService;
    }

    @Override
    public String getCommand() {
        return "/add_question";
    }

    @Override
    public void handle(Update update, AbsSender sender) {
        var userId = update.getMessage().getFrom().getId();
        var chatId = update.getMessage().getChatId();
        var text = update.getMessage().getText();

        QuestionSession session = sessionManager.getOrCreate(userId, QuestionSession.class);

        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
        if (text.equals("/add_question")) {
            session.setStep(QuestionSession.Step.ASK_QUESTION_TEXT);
            send(sender, chatId, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤):");
            return;
        }

        switch (session.getStep()) {
            case ASK_QUESTION_TEXT -> {
                if (text.trim().isEmpty() || text.length() > 200) {
                    send(sender, chatId, "‚ùå –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.");
                    return;
                }
                session.setQuestionText(text.trim());
                session.setStep(QuestionSession.Step.ASK_ANSWER_OPTIONS);
                send(sender, chatId, "üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç 1:");
            }
            case ASK_ANSWER_OPTIONS -> {
                session.getOptions().add(text.trim());
                if (session.getOptions().size() < 4) {
                    send(sender, chatId, "üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç " + (session.getOptions().size() + 1) + ":");
                } else {
                    session.setStep(QuestionSession.Step.ASK_CORRECT_OPTION);
                    send(sender, chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1-4):");
                }
            }
            case ASK_CORRECT_OPTION -> {
                try {
                    int num = Integer.parseInt(text.trim());
                    if (num < 1 || num > 4) {
                        send(sender, chatId, "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4.");
                        return;
                    }
                    session.setCorrectOption(num);
                    session.setStep(QuestionSession.Step.ASK_TAGS);
                    send(sender, chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):");
                } catch (NumberFormatException e) {
                    send(sender, chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.");
                }
            }
            case ASK_TAGS -> {
                session.setTags(Arrays.stream(text.split(","))
                        .map(String::trim)
                        .filter(s -> !s.isEmpty())
                        .toList());
                session.setStep(QuestionSession.Step.FINISHED);
                Long telegramId = update.getMessage().getFrom().getId();
                String questionId = questionService.saveQuestion(telegramId,
                        session.getQuestionText(),
                        session.getOptions(),
                        session.getCorrectOption(),
                        session.getTags());
                SendMessage message = new SendMessage();
                message.setChatId(chatId.toString());
                message.setText(
                        "‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n" +
                        "üÜî ID: <code>" + questionId + "</code>\n\n"
                );
                message.setParseMode("HTML");
                try {
                    sender.execute(message);
                } catch (TelegramApiException e) {
                    throw new RuntimeException(e);
                }
                sessionManager.clear(userId);
            }
            default -> send(sender, chatId, "–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /add_question");
        }
    }

    private void send(AbsSender sender, Long chatId, String text) {
        try {
            sender.execute(new SendMessage(chatId.toString(), text));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
