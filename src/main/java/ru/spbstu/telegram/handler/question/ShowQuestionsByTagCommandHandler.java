package ru.spbstu.telegram.handler.question;

import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import ru.spbstu.telegram.handler.CommandHandler;
import ru.spbstu.telegram.sender.MessageSender;
import ru.spbstu.service.QuestionService;
import ru.spbstu.dto.QuestionDto;

import java.util.List;

@Component
public class ShowQuestionsByTagCommandHandler extends CommandHandler {
    private final QuestionService questionService;

    public ShowQuestionsByTagCommandHandler(MessageSender messageSender,
                                            QuestionService questionService) {
        super(messageSender);
        this.questionService = questionService;
    }

    @Override
    public String getCommand() {
        return "/show_questions_by_tag";
    }

    @Override
    public String getDescription() {
        return "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É";
    }

    @Override
    public void handle(Update update) {
        String text = update.getMessage().getText();
        Long telegramId = update.getMessage().getFrom().getId();
        try {
            String[] parts = text.split(" ");

            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã show_questions_by_tag –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    telegramId, text);

            if (parts.length < 2) {
                messageSender.sendMessage(telegramId,
                        "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/show_questions_by_tag <—Ç–µ–≥>`");
                return;
            }
            if (parts.length > 2) {
                messageSender.sendMessage(telegramId,
                        "‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω —Ç–µ–≥ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/show_questions_by_tag <—Ç–µ–≥>`");
                return;
            }
            String tagName = parts[1].trim();
            String tagNameForMarkdown = messageSender.escapeTagForMarkdown(tagName);

            if (!questionService.tagExists(tagName)) {
                logger.warn("–¢–µ–≥ '{}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {})", tagName, telegramId);
                messageSender.sendMessage(telegramId,
                        "‚ùå –¢–µ–≥ #" + tagNameForMarkdown + " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n" +
                                "üè∑Ô∏è **–°–æ–∑–¥–∞—Ç—å —Ç–µ–≥:** `/add_tag " + tagName + "`\n" +
                                "üìã **–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–≥–æ–≤:** `/list_tags`");
                return;
            }

            List<QuestionDto> questions = questionService.getQuestionsByTag(tagName);

            if (questions.isEmpty()) {
                messageSender.sendMessage(telegramId,
                        "‚ÑπÔ∏è –ü–æ —Ç–µ–≥—É #" + tagNameForMarkdown + " –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.");
                return;
            }

            logger.debug("–ù–∞–π–¥–µ–Ω–æ {} –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–≥—É '{}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    questions.size(), tagName, telegramId);
            StringBuilder response = new StringBuilder();
            response.append("üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–≥—É #").append(tagNameForMarkdown).append(" (–≤—Å–µ–≥–æ ").append(questions.size()).append("):\n\n");

            for (QuestionDto question : questions) {
                String questionText = question.text()
                        .replace("_", "\\_")
                        .replace("*", "\\*")
                        .replace("`", "\\`");

                if (questionText.length() > 50) {
                    questionText = questionText.substring(0, 47) + "...";
                }
                response.append("‚Ä¢ üÜî: `").append(question.id())
                        .append("` \n  \uD83D\uDCDA ¬´").append(questionText).append("¬ª\n\n");
            }

            messageSender.sendMessage(telegramId, response.toString());
            logger.info("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–≥—É '{}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", tagName, telegramId);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ show_questions_by_tag –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}: {}",
                    telegramId, e.getMessage(), e);
            messageSender.sendMessage(telegramId,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤");
        }
    }
}
