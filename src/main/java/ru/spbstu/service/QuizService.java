package ru.spbstu.service;

import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.polls.SendPoll;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.polls.PollAnswer;
import org.telegram.telegrambots.meta.bots.AbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.spbstu.model.Question;
import ru.spbstu.model.QuestionOption;
import ru.spbstu.model.User;
import ru.spbstu.session.QuizSession;
import ru.spbstu.utils.SessionManager;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class QuizService {

    private final SessionManager sessionManager;
    private final QuestionService questionService;
    private final UserService userService;
    private final ScoreByTagService scoreByTagService;

    public QuizService(SessionManager sessionManager,
                       QuestionService questionService,
                       UserService userService,
                       ScoreByTagService scoreByTagService) {
        this.sessionManager = sessionManager;
        this.questionService = questionService;
        this.userService = userService;
        this.scoreByTagService = scoreByTagService;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: –±–µ—Ä—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —Å–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é
     * –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SendPoll –≤ —á–∞—Ç.
     */
    public void startNewQuiz(Long userId, Long chatId, AbsSender sender) {
        Question randomQuestion = questionService.getRandomQuestion();

        if (randomQuestion == null) {
            sendMessage(sender, chatId, "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_question");
            return;
        }

        QuizSession session = sessionManager.getOrCreate(userId, QuizSession.class);
        session.setCurrentQuestion(randomQuestion);
        session.setStep(QuizSession.Step.WAITING_FOR_ANSWER);

        List<QuestionOption> sortedOptions = randomQuestion.getOptions().stream()
                .sorted(Comparator.comparingInt(QuestionOption::getOptionNumber))
                .toList();

        List<String> options = sortedOptions.stream()
                .map(QuestionOption::getText)
                .collect(Collectors.toList());

        SendPoll poll = new SendPoll();
        poll.setChatId(chatId.toString());
        poll.setQuestion("üé≤ " + randomQuestion.getText());
        poll.setOptions(options);
        poll.setCorrectOptionId(randomQuestion.getCorrectOption() - 1);
        poll.setType("quiz");
        poll.setOpenPeriod(30);
        poll.setIsAnonymous(false);

        System.out.println("Check our QUIZ session: " + sessionManager.getSession(userId));

        try {
            sender.execute(poll);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç incoming PollAnswer (Update.hasPollAnswer()).
     * –î–µ–ª–µ–≥–∏—Ä—É–π—Ç–µ –≤—ã–∑–æ–≤ –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–∞: quizService.processPollAnswer(update, sender)
     */
    public void processPollAnswer(Update update, AbsSender sender) {
        if (!update.hasPollAnswer()) return;

        PollAnswer pollAnswer = update.getPollAnswer();
        Long userId = pollAnswer.getUser().getId();
        var optionIds = pollAnswer.getOptionIds();

        if (optionIds == null || optionIds.isEmpty()) {
            return;
        }

        int selectedAnswer = optionIds.get(0) + 1; // –æ–±—Ä–∞—Ç–Ω–æ –≤ 1-based

        QuizSession session = sessionManager.getSession(userId, QuizSession.class);
        if (session == null || session.isAnswered()) {
            return;
        }

        session.setAnswered(true);

        Question question = session.getCurrentQuestion();
        boolean isCorrect = selectedAnswer == question.getCorrectOption();

        if (isCorrect) {
            User user = userService.getUser(userId);
            user.setScore(user.getScore() + 1);
            userService.save(user);
            for (var tag : question.getTags()) {
                scoreByTagService.incrementScore(user, tag);
            }
        }

        User currentUser = userService.getUser(userId); // —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç
        showQuizResult(sender, userId, question, selectedAnswer, isCorrect, currentUser.getScore());
    }

    private void showQuizResult(AbsSender sender, Long userId, Question question, int selectedAnswer, boolean isCorrect, int score) {
        StringBuilder message = new StringBuilder();

        if (isCorrect) {
            message.append("‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* +1 –±–∞–ª–ª\n\n");
        } else {
            message.append("‚ùå *–ù–µ–≤–µ—Ä–Ω–æ!*\n\n");
        }

        QuestionOption correctOption = question.getOptions().stream()
                .filter(option -> option.getOptionNumber() == question.getCorrectOption())
                .findFirst()
                .orElse(null);

        if (correctOption != null && !isCorrect) {
            message.append("üí° *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* ").append(question.getCorrectOption())
                    .append(". ").append(correctOption.getText()).append("\n\n");
        }

        if (!question.getTags().isEmpty()) {
            String tags = question.getTags().stream()
                    .map(tag -> "#" + tag.getName())
                    .collect(Collectors.joining(" "));
            message.append("üè∑Ô∏è *–¢–µ–≥–∏:* ").append(tags).append("\n\n");
        }

        message.append("üèÜ *–í–∞—à —Å—á–µ—Ç:* ").append(score).append(" –±–∞–ª–ª–æ–≤");

        sendMessage(sender, userId, message.toString());
    }

    private void sendMessage(AbsSender sender, Long chatId, String text) {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText(text);
        msg.setParseMode("Markdown"); // –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏/–∫—É—Ä—Å–∏–≤—ã; –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        try {
            sender.execute(msg);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
